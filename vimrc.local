" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
" map <leader>s :cgete system('rspec --require ~/Developer/dotfiles/quickfix_formatter.rb --format QuickfixFormatter') \| cwindow

let test#ruby#rspec#executable = 'bundle exec rspec --require ~/Developer/dotfiles/quickfix_formatter.rb --format QuickfixFormatter --out quickfix.out --format progress'

" let g:rspec_command = 'bundle exec rspec --require ~/Developer/dotfiles/quickfix_formatter.rb --format QuickfixFormatter --out quickfix.out --format progress'

map <leader>q :cg quickfix.out \| cwindow<CR>

map <leader>n :NERDTreeToggle

" Remove trailing whitespace when a file is saved
" Source: <http://vim.wikia.com/wiki/Remove_unwanted_spaces>

function! TrimWhiteSpace()
    " Do not record the whitespace removal in the undo history
    " Source: <http://vim.1045645.n5.nabble.com/there-s-undojoin-how-about-dotjoin-td1203135.html>
    try
      undojoin
    catch
      " Probably an undo was just issued, and so there's no way to join the
      " undo. Which sucks.
    endtry
    %s/\s*$//
    ''
endfunction

syntax enable
colorscheme monokai

autocmd! FileWritePre * :call TrimWhiteSpace()
autocmd! FileAppendPre * :call TrimWhiteSpace()
autocmd! FilterWritePre * :call TrimWhiteSpace()
autocmd! BufWritePre * :call TrimWhiteSpace()

" Open new file in vertical split
let g:ctrlp_open_new_file = 'v'

" Set spell checking on
set spell

" Disable spell for yaml files
autocmd FileType yaml setlocal nospell

" Set highlighting for jinja files
au BufNewFile,BufRead *.jinja set filetype=yaml

" Enable multiple style checkers for Ruby
let g:syntastic_ruby_checkers = ['mri', 'rubocop']

" Enable multiple style checkers for Python
let g:syntastic_python_checkers = ['python3', 'flake8']

" Open help in new tab
cabbrev help tab help

let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
augroup ProjectDrawer
  autocmd!
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | :Vexplore | endif
augroup END

:au FileChangedShell * echo "Warning: File changed on disk"

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

let macvim_skip_colorscheme=1


