" Search for word under cursor in a project
nmap <silent> <leader>s :Ack <C-R><C-W><CR>


" Don't search in closed folds 'foldopen'
set fdo-=search

" Format format json
map <leader>j !python3 -m json.tool<CR>

" Zoom the tmux runner page
" map <Leader>vz :VimuxZoomRunner<CR>

" Yank 's' register to the tmp file
noremap <Leader>y "sy<CR>:call writefile(split(@s, "\n", 0), '/dvim/s.reg')<CR>

" Paste 's' register from the tmp file
noremap <Leader>p :let @s = join(readfile("/dvim/s.reg"), "\n")<CR>"sp<CR>

" Set vim history to tmp file
set viminfo+=n/dvim/.viminfo

" Set vimux to use window
" let g:VimuxRunnerType = "window"

" Show red line
set colorcolumn=88

" Enable inplace editing for tmp crontab file
if $VIM_CRONTAB == "true"
  autocmd filetype crontab setlocal nobackup nowritebackup
endif

let g:syntastic_mode_map = {'mode': 'active'}
let g:syntastic_auto_loc_list = 0


" Set controlP
let g:ctrlp_max_depth = 1000
let g:ctrlp_max_files = 0

map <leader>f :NERDTreeFind<cr>

function! TagP()
  let g:ctrlp_default_input = expand('<cword>')
  CtrlPTag
  let g:ctrlp_default_input = ''
endfunction
command! TagP call TagP()
noremap <Leader>pt :TagP<CR>

:nnoremap <Leader>c :let @+=expand('%:p')<CR>

" Exit terminal mode with escape
:tnoremap <Esc> <C-\><C-n>

let g:vroom_use_vimshell = 1

command! -range=0 -complete=shellcmd -nargs=+ VimShellExecute
      \ call neoterm#do({ 'cmd': <q-args>, 'target': <count>, 'mod': <q-mods> })

"=======================================

function! ExitNormalMode()
    unmap <buffer> <silent> <RightMouse>
    call feedkeys("a")
endfunction

function! EnterNormalMode()
    if &buftype == 'terminal' && mode('') == 't'
        call feedkeys("\<c-w>N")
        call feedkeys("\<c-y>")
        map <buffer> <silent> <RightMouse> :call ExitNormalMode()<CR>
    endif
endfunction

tmap <silent> <ScrollWheelUp> <c-w>:call EnterNormalMode()<CR>

"============================================

autocmd VimEnter * if argc() == 0 && !exists("s:std_in") |  execute "wincmd l" | endif
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") |  split | endif
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") |  execute "wincmd j" | endif
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") |  execute "resize " . (winheight(0) * 2/3) | endif
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") |  execute "T pwd" | endif
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") |  execute "wincmd k" | endif

autocmd BufWritePre *_spec.rb execute ':VroomRunTestFile'

