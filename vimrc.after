let g:ackprg="ag --nocolor --nogroup --column"

" Search for word under cursor in a project
nmap <silent> <leader>s :Ack <C-R><C-W><CR>

" Don't search in closed folds 'foldopen'
set fdo-=search

" Format format json
map <leader>j !python3 -m json.tool<CR>

" Zoom the tmux runner page
" map <Leader>vz :VimuxZoomRunner<CR>

" Yank 's' register to the tmp file
noremap <Leader>y "sy<CR>:call writefile(split(@s, "\n", 0), '/dvim/s.reg')<CR>

" Paste 's' register from the tmp file
noremap <Leader>p :let @s = join(readfile("/dvim/s.reg"), "\n")<CR>"sp<CR>

" Set vim history to tmp file
set viminfo+=n/dvim/.viminfo

" Set vimux to use window
" let g:VimuxRunnerType = "window"

" Show red line
set colorcolumn=88

" Enable inplace editing for tmp crontab file
if $VIM_CRONTAB == "true"
  autocmd filetype crontab setlocal nobackup nowritebackup
endif

let g:syntastic_mode_map = {'mode': 'active'}
let g:syntastic_auto_loc_list = 0



map <leader>j :NERDTreeFind<cr>

set foldmethod=indent   
set nofoldenable



:nnoremap <Leader>c :let @+=expand('%:p')<CR>

" auto save 
autocmd FocusLost * silent! wa
autocmd BufLeave * silent! wa
autocmd WinLeave * silent! wa

autocmd BufWritePre *_spec.rb execute ':call RunCurrentSpecFile()'

nnoremap <C-]]> :only<bar>vsplit<CR>:execute "tag" . expand('<cword>')<CR>

autocmd BufWritePre *.rb,*.js :FixWhitespace

set autoread

setlocal foldmethod=syntax
set foldcolumn=2


"============================================
" ctrlp.vim
"============================================


" iterm2 > run co process > `echo mvim  --remote-silent \1 +\2`

autocmd BufWinEnter,BufNewFile * silent tabo


"============================================
" ctrlp.vim
"============================================

let g:ctrlp_user_command = ['.git/', 'git ls-files --cached --others  --exclude-standard %s']

let g:ctrlp_default_input = expand('<cword>')

"============================================
" vim-rspec
"============================================

let g:rspec_runner = "os_x_iterm2"

"============================================
" vim-i18n
"============================================

vmap <Leader>z :call I18nTranslateString()<CR>
vmap <Leader>dt :call I18nDisplayTranslation()<CR>


"============================================
" solargraph
"============================================

" some solargraph
" https://blog.schembri.me/post/solargraph-in-vim/
let g:LanguageClient_autoStop = 0
autocmd FileType ruby setlocal omnifunc=LanguageClient#complete


"============================================
" https://github.com/neoclide/coc.nvim
"============================================

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"


" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

let macvim_skip_colorscheme=1
set background=dark
colorscheme solarized
syntax on

let g:snipMate = get(g:, 'snipMate', {}) " Allow for vimrc re-sourcing
let g:snipMate.scope_aliases = {}
let g:snipMate.scope_aliases['ruby'] = 'ruby,rails'